// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rest

import (
	"github.com/go-devs-ua/octagon/app/entities"
	"sync"
)

// Ensure, that UserUsecaseMock does implement UserUsecase.
// If this is not the case, regenerate this file with moq.
var _ UserUsecase = &UserUsecaseMock{}

// UserUsecaseMock is a mock implementation of UserUsecase.
//
//	func TestSomethingThatUsesUserUsecase(t *testing.T) {
//
//		// make and configure a mocked UserUsecase
//		mockedUserUsecase := &UserUsecaseMock{
//			DeleteFunc: func(user entities.User) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func(queryParams entities.QueryParams) ([]entities.User, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByIDFunc: func(id string) (*entities.User, error) {
//				panic("mock out the GetByID method")
//			},
//			SignUpFunc: func(user entities.User) (string, error) {
//				panic("mock out the SignUp method")
//			},
//		}
//
//		// use mockedUserUsecase in code that requires UserUsecase
//		// and then make assertions.
//
//	}
type UserUsecaseMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(user entities.User) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(queryParams entities.QueryParams) ([]entities.User, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id string) (*entities.User, error)

	// SignUpFunc mocks the SignUp method.
	SignUpFunc func(user entities.User) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// User is the user argument value.
			User entities.User
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// QueryParams is the queryParams argument value.
			QueryParams entities.QueryParams
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID string
		}
		// SignUp holds details about calls to the SignUp method.
		SignUp []struct {
			// User is the user argument value.
			User entities.User
		}
	}
	lockDelete  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetByID sync.RWMutex
	lockSignUp  sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *UserUsecaseMock) Delete(user entities.User) error {
	if mock.DeleteFunc == nil {
		panic("UserUsecaseMock.DeleteFunc: method is nil but UserUsecase.Delete was just called")
	}
	callInfo := struct {
		User entities.User
	}{
		User: user,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(user)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedUserUsecase.DeleteCalls())
func (mock *UserUsecaseMock) DeleteCalls() []struct {
	User entities.User
} {
	var calls []struct {
		User entities.User
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *UserUsecaseMock) GetAll(queryParams entities.QueryParams) ([]entities.User, error) {
	if mock.GetAllFunc == nil {
		panic("UserUsecaseMock.GetAllFunc: method is nil but UserUsecase.GetAll was just called")
	}
	callInfo := struct {
		QueryParams entities.QueryParams
	}{
		QueryParams: queryParams,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(queryParams)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedUserUsecase.GetAllCalls())
func (mock *UserUsecaseMock) GetAllCalls() []struct {
	QueryParams entities.QueryParams
} {
	var calls []struct {
		QueryParams entities.QueryParams
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *UserUsecaseMock) GetByID(id string) (*entities.User, error) {
	if mock.GetByIDFunc == nil {
		panic("UserUsecaseMock.GetByIDFunc: method is nil but UserUsecase.GetByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedUserUsecase.GetByIDCalls())
func (mock *UserUsecaseMock) GetByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// SignUp calls SignUpFunc.
func (mock *UserUsecaseMock) SignUp(user entities.User) (string, error) {
	if mock.SignUpFunc == nil {
		panic("UserUsecaseMock.SignUpFunc: method is nil but UserUsecase.SignUp was just called")
	}
	callInfo := struct {
		User entities.User
	}{
		User: user,
	}
	mock.lockSignUp.Lock()
	mock.calls.SignUp = append(mock.calls.SignUp, callInfo)
	mock.lockSignUp.Unlock()
	return mock.SignUpFunc(user)
}

// SignUpCalls gets all the calls that were made to SignUp.
// Check the length with:
//
//	len(mockedUserUsecase.SignUpCalls())
func (mock *UserUsecaseMock) SignUpCalls() []struct {
	User entities.User
} {
	var calls []struct {
		User entities.User
	}
	mock.lockSignUp.RLock()
	calls = mock.calls.SignUp
	mock.lockSignUp.RUnlock()
	return calls
}
