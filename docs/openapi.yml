openapi: 3.0.3
info:
  title: Octagon openAPI
  description: This is Super-Super-Heroes' code platform
  version: 0.0.1
servers:
  - url: http://localhost:8080
paths:
  /users:
    post:
      tags:
        - users
      summary: Creates new user
      description: This endpoint for create a new user to Octagon. Request consists of user email, user first name, user last name and user password. Response may be consist of status code and response message
      requestBody:
        required: true
        description: Passes user data to create User
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201": { $ref: "#/components/responses/created" }
        "400": { $ref: "#/components/responses/badRequest" }
        "409": { $ref: "#/components/responses/conflict" }
        "500": { $ref: "#/components/responses/internalServerError" }
  /users/{id}:
    get:
      summary: Return user
      description: The endpoint return an user by the id if the id exists in the database.  Request consists of id specified in url. Response consists of a status code and of a response body. The response body may consist an error message or an entity of PublicUser
      responses:
        "200": { $ref: "#/components/responses/ok" }
        "404": { $ref: "#/components/responses/notFound" }
        "500": { $ref: "#/components/responses/internalServerError" }
    parameters:
      - name: id
        in: path
        description: ID of user to use
        required: true
        schema:
          type: array
          items:
            type: string  
        style: simple
     

components:
  responses:
    ok:
      description: Success.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PublicUser"
    notFound:
      description: User not found. 
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    created:
      description: Successful created user.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    badRequest:
      description: Bad Request. 
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    conflict:
      description: User provided email that already exists.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    internalServerError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    User:
      type: object
      required:
        - email
        - firstname
        - lastname
        - password
      properties:
        email:
          {
            description: must contains '@' and must be unique,
            type: string,
            format: email,
            maxLength: 256,
            uniqueItems: true,
            example: john@email.com,
          }
        firstName: { type: string, example: John }
        lastName: { type: string, example: Doe }
        password:
          {
            description: only ASCII symbols,
            type: string,
            format: password,
            minLength: 8,
            maxLength: 256,
            example: "123456Aa",
          }
    PublicUser:
      type: object
      required:
        - id
        - email
        - firstname
        - lastname
        - created_at
      properties:
        id: {
            description: unique identifier of the user entetie ,
            type: string,
            format: id,
            uniqueItems: true,
            example: "297a80a4-ea77-4f9e-8d0c-ca03cb263625",
        }
        email:
          {
            description: must contains '@' and must be unique,
            type: string,
            format: email,
            maxLength: 256,
            uniqueItems: true,
            example: john@email.com,
          }
        firstName: { type: string, example: John }
        lastName: { type: string, example: Doe }
        created_at:
          {
            description: Indicates date and time of user creation,
            type: string,
            format: created_at,
            example: "2022-10-23T10:47:28.896701Z",
          }
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
